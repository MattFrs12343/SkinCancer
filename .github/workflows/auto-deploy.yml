name: 🚀 Auto Deploy OncoDerma

# 🎯 TRIGGER: Deploy automático en commits a master
on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # 🔍 Job 1: Pre-deploy checks
  pre-deploy-checks:
    name: 🔍 Pre-Deploy Validation
    runs-on: ubuntu-latest
    
    outputs:
      should-deploy: ${{ steps.check.outputs.deploy }}
      
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔍 Verificar cambios críticos
      id: check
      run: |
        echo "🔍 Verificando si el deploy es necesario..."
        
        # Verificar si hay cambios en archivos críticos
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        echo "Archivos cambiados: $CHANGED_FILES"
        
        DEPLOY_NEEDED=false
        
        if echo "$CHANGED_FILES" | grep -E "(frontend/|backend/|package\.json|requirements\.txt)"; then
          echo "✅ Cambios detectados en código - Deploy necesario"
          DEPLOY_NEEDED=true
        else
          echo "ℹ️ Solo cambios en documentación - Deploy omitido"
        fi
        
        echo "deploy=$DEPLOY_NEEDED" >> $GITHUB_OUTPUT
        
    - name: 📋 Reporte de pre-deploy
      run: |
        echo "## 🔍 Pre-Deploy Check" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy necesario:** ${{ steps.check.outputs.deploy }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Rama:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # 🏗️ Job 2: Build y Deploy
  deploy:
    name: 🚀 Deploy Application
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Build Frontend
      working-directory: ./frontend
      run: |
        echo "🏗️ Building frontend..."
        npm ci
        npm run build
        echo "✅ Frontend build completado"
        
    - name: 🔧 Validate Backend
      working-directory: ./backend
      run: |
        echo "🔧 Validating backend..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -c "import app.main; print('✅ Backend validation OK')"
        
    - name: 🎉 Deploy Success Notification
      run: |
        echo "🚀 ¡Deploy completado exitosamente!"
        echo "=================================="
        echo "📅 Fecha: $(date)"
        echo "👤 Deployado por: ${{ github.actor }}"
        echo "📝 Commit: ${{ github.event.head_commit.message }}"
        echo "🌿 Rama: ${{ github.ref_name }}"
        echo "🔗 Repositorio: ${{ github.repository }}"
        echo "=================================="
        
    - name: 📊 Deploy Summary
      run: |
        echo "## 🚀 Deploy Completado" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Componentes Deployados:" >> $GITHUB_STEP_SUMMARY
        echo "- 🎨 **Frontend:** React + Vite build exitoso" >> $GITHUB_STEP_SUMMARY
        echo "- 🔧 **Backend:** FastAPI validación exitosa" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Información del Deploy:" >> $GITHUB_STEP_SUMMARY
        echo "- **👤 Deployado por:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **📅 Fecha:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **📝 Commit:** ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
        echo "- **🌿 Rama:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Próximos pasos:" >> $GITHUB_STEP_SUMMARY
        echo "- Verificar que la aplicación funcione correctamente" >> $GITHUB_STEP_SUMMARY
        echo "- Monitorear logs por posibles errores" >> $GITHUB_STEP_SUMMARY
        echo "- Realizar pruebas de funcionalidad" >> $GITHUB_STEP_SUMMARY

  # 📧 Job 3: Post-deploy notifications
  post-deploy:
    name: 📧 Post-Deploy Actions
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, deploy]
    if: always() && needs.pre-deploy-checks.outputs.should-deploy == 'true'
    
    steps:
    - name: 📊 Deploy Status Check
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deploy exitoso - Enviando notificaciones"
          echo "STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Deploy falló - Enviando alertas"
          echo "STATUS=failure" >> $GITHUB_ENV
        fi
        
    - name: 📢 Final Notification
      run: |
        echo "📢 Notificación final de deploy"
        echo "Estado: ${{ env.STATUS }}"
        echo "Repositorio: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        
        if [ "${{ env.STATUS }}" == "success" ]; then
          echo "🎉 ¡OncoDerma deployado exitosamente!"
        else
          echo "⚠️ Hubo problemas en el deploy de OncoDerma"
        fi